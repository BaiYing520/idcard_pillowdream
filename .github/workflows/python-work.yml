name: Python Build

# 触发条件：推送到main分支、创建PR、手动触发和每日定时构建
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '20 6 * * *'  # 每天6:20运行（UTC时间）

# 工作流任务
jobs:
  build:
    # 在不同操作系统上运行，指定macOS版本避免迁移警告
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:
    # 步骤1：检出代码
    - uses: actions/checkout@v4

    # 步骤2：设置Python环境，禁用自动缓存查找
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        # 明确指定requirements文件路径，如果文件不存在则禁用缓存
        cache-dependency-path: |
          **/requirements.txt
          **/pyproject.toml

    # 步骤3：安装依赖（不依赖requirements.txt）
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 直接安装所需依赖，不使用requirements.txt
        pip install pyinstaller
        pip install numpy
        pip install pillow
        pip install opencv-python
        pip install opencv-contrib-python
        
    # 步骤4：运行测试（如需启用可取消注释）
    #- name: Run tests
      #run: |
        #pip install pytest
        #pytest tests/ --cov=./ --cov-report=xml

    # 步骤5：构建项目（使用pyinstaller）
    - name: Build with pyinstaller
      run: |
        # 根据主程序文件调整的打包命令
        pyinstaller -i asserts/ico.ico --windowed --clean --noconfirm --onefile --add-data "asserts;asserts" main.py

    # 步骤6：上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/  # pyinstaller的输出目录
    
