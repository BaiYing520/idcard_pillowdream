name: Python Build

# 触发条件：推送到main分支、创建PR、手动触发和每日定时构建
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '20 6 * * *'  # 每天6:20运行（UTC时间）

# 工作流任务
jobs:
  build:
    # 在不同操作系统上运行
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    # 步骤1：检出代码
    - uses: actions/checkout@v4

    # 步骤2：设置Python环境
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # 缓存pip依赖，加快构建速度

    # 步骤3：安装依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller  # 安装打包工具
        pip install numpy
        pip install pillow
        pip install opencv-python
        pip install opencv-contrib-python
        
    # 步骤4：运行测试（如需启用可取消注释）
    #- name: Run tests
      #run: |
        #pip install pytest
        #pytest tests/ --cov=./ --cov-report=xml

    # 步骤5：构建项目（使用pyinstaller）
    - name: Build with pyinstaller for windows
      run: |
        # 根据主程序文件调整的打包命令
        pyinstaller -i asserts/ico.ico --windowed --clean --noconfirm --onefile --add-data "asserts;asserts" main.py
      if: matrix.os == 'windows-latest'  # 只在Windows上构建
      
    - name: Build with pyinstaller for macos
      run: |
        # 根据主程序文件调整的打包命令
        pyinstaller -i asserts/ico.icns --windowed --clean --noconfirm --onefile --add-data ./asserts:./asserts --paths /Users/chao/PycharmProjects/idcard_generator/venv/lib/python3.7/site-packages main.py
      if: matrix.os == 'windows-latest'  # 只在Macos上构建

    # 步骤6：上传构建产物（已升级到v4版本）
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4  # 已更新为最新版本v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/  # pyinstaller的输出目录
    
