name: Python Build

# 触发条件：推送到main分支或创建PR时
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 工作流任务
jobs:
  build:
    # 在不同操作系统上运行（可选）
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    # 步骤1：检出代码
    - uses: actions/checkout@v4

    # 步骤2：设置Python环境
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # 缓存pip依赖，加快构建速度

    # 步骤3：安装依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 安装项目依赖
        pip install pyinstaller  # 安装打包工具（如果需要）
        pip install numpy
        pip install pillow
        pip install opencv-python
        pip install opencv-contrib-python
        
    # 步骤4：运行测试（如果有测试）
    #- name: Run tests
      #run: |
        # 示例：运行pytest
        #pip install pytest
        #pytest tests/ --cov=./ --cov-report=xml

    # 步骤5：构建项目（使用pyinstaller）
    - name: Build with pyinstaller
      run: |
        # 根据你的主程序文件调整
        pyinstaller -i asserts/ico.ico --windowed --clean --noconfirm --onefile --add-data "asserts;asserts" main.py
      if: matrix.os == 'windows-latest'  # 可选：只在特定系统上构建

    # 步骤6：上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}
        path: dist/  # pyinstaller的输出目录
